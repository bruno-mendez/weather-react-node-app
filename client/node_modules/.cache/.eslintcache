[{"/Users/Bruno/Dev/Fullstack/weather-app-react/client/src/index.js":"1","/Users/Bruno/Dev/Fullstack/weather-app-react/client/src/reportWebVitals.js":"2","/Users/Bruno/Dev/Fullstack/weather-app-react/client/src/App.js":"3"},{"size":547,"mtime":1613541770737,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1613534467642,"results":"6","hashOfConfig":"5"},{"size":2724,"mtime":1613602126596,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bt177x",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/Users/Bruno/Dev/Fullstack/weather-app-react/client/src/index.js",[],"/Users/Bruno/Dev/Fullstack/weather-app-react/client/src/reportWebVitals.js",[],"/Users/Bruno/Dev/Fullstack/weather-app-react/client/src/App.js",["15","16","17","18","19"],"import React, { Component } from 'react';\nimport { Alert, Col, Row, Spinner, Badge,Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    loading: '',\n    country: '',\n    responseToPost: '',\n    error:'',\n  };\n  \n  componentDidMount() {\n    this.setState({ loading: false });\n/*     this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err)); */\n  }\n  \n/*   callApi = async () => {\n    const response = await fetch('/api/weather');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n  }; */\n  \n  handleSubmit = async e => {\n    this.setState({ loading: true });\n    e.preventDefault();\n    const response = await fetch('api/weather', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ cityName: this.state.country }),\n    })\n    const body = await response.json();\n\n    this.setState({ responseToPost: body });\n    this.setState({ loading: false });\n  };\n  \nrender() {\n    return (\n      <div className=\"App\">\n         <h6><Badge color=\"light\" pill>v1.0 | Dev by Bruno Mendez</Badge></h6>\n         <br></br>\n        <h1><Badge color=\"primary\">How's The Weather In?</Badge></h1><br></br>\n        <Form action=\"api/weather\"method =\"post\" onSubmit={this.handleSubmit}>\n            <FormGroup row>\n              <Input\n                type=\"text\"\n                id=\"city\"\n                value={this.state.country}\n                placeholder=\"City name\"\n                onChange={e => this.setState({ country: e.target.value })}\n              />\n            </FormGroup>\n            <br></br>\n\n          <Button color=\"warning\"type=\"submit\">Search</Button>\n        </Form>\n        <br></br>\n\n        {this.state.responseToPost!=='' && !this.state.loading &&\n            <div>\n                <img src={this.state.responseToPost.icon_url}></img>\n                <Alert color=\"primary\"> Weather of {this.state.responseToPost.city}: {this.state.responseToPost.desc}</Alert> \n                <Alert color=\"success\"> Temperature: {this.state.responseToPost.temp} 째C </Alert>\n                <Alert color=\"danger\"> Max:  {this.state.responseToPost.max} 째C </Alert>\n                <Alert color=\"secondary\"> Min: {this.state.responseToPost.min} 째C </Alert>\n                <Alert color=\"info\"> Feels like: {this.state.responseToPost.feels} 째C </Alert>\n            </div>\n        }\n        {this.state.loading &&\n          <Spinner type=\"grow\" color=\"primary\" />\n        }\n       \n      </div>\n    );\n   \n  }\n}\n\nexport default App;",{"ruleId":"20","severity":1,"message":"21","line":2,"column":17,"nodeType":"22","messageId":"23","endLine":2,"endColumn":20},{"ruleId":"20","severity":1,"message":"24","line":2,"column":22,"nodeType":"22","messageId":"23","endLine":2,"endColumn":25},{"ruleId":"20","severity":1,"message":"25","line":2,"column":67,"nodeType":"22","messageId":"23","endLine":2,"endColumn":72},{"ruleId":"20","severity":1,"message":"26","line":2,"column":81,"nodeType":"22","messageId":"23","endLine":2,"endColumn":89},{"ruleId":"27","severity":1,"message":"28","line":70,"column":17,"nodeType":"29","endLine":70,"endColumn":63},"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Label' is defined but never used.","'FormText' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]